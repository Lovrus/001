package Java_H_Schildt.chapter_1_14;

// Простой обобщенный класс.
//Здесь Т обозначает параметр типа,
// который будет заменен реальным типом
//при создании объекта типа Gen
public class Gen<T> {
    T ob; // объявить объект типа Т

    // Передать конструктору ссылку на объект типа Т
    Gen(T o) {
        ob = o;
    }

    // возвратить объект ob
    T getOb() {
        return ob;
    }

    // показать тип Т
    void showType() {
        System.out.println("Типом Т является "
                + ob.getClass().getName());
    }
}

// Продемонстрировать применение обобщенного класса
class GetDemo {
    public static void main(String[] args) {
        // Создать ссылку типа Gen для целых чисел
        Gen<Integer> iOb;

        // Создать объект типа Gen<Integer> и присвоить
        // ссылку для него переменной iOb. Обратите внимание на
        // применение автоупаковки для инкапсуляции значения 88
        // в объекте типа Integer
        iOb = new Gen<Integer>(88);

        // показать тип данных, хранящихся в переменной iOb
        iOb.showType();

        // получить значение переменной iOb. Обратите
        // внимание на то, что для этого не требуется
        // никакого применения типов
        int v = iOb.getOb();
        System.out.println("Значение: " + v);
        System.out.println();

        // создать объект типа Gen для символьных строк String
        Gen<String> strOb = new Gen<String>("Тест обобщений");

        // показать тип данных, хранящихся в переменной strOb
        strOb.showType();

        // получить значение переменной strOb. И в этом
        // случае приведение типов не требуется
        String str = strOb.getOb();
        System.out.println("Значение: " + str);
    }
}
